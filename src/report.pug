extends jade/layout.pug

block append styles
  link(rel='stylesheet', href='%REPORT_CSS%')
  link(rel='stylesheet', href='https://js.arcgis.com/%ESRI_VERSION%/esri/css/esri.css')
  link(rel='stylesheet', href='https://js.arcgis.com/%ESRI_VERSION%/dijit/themes/tundra/tundra.css')


block append content
  div#report.report
    div#report-table.report-table
  div#share-modal.share-modal.hidden
    //- header.report-header
    //-   div.report-header__logo-container
    //-     a#logo-anchor(target='_blank')
    //-   div.report-header__title-container
    //-     h1#report-title.report-header__title
    //-     //- h2#report-subtitle.report-header__subtitle
    //-     div#report-icons.report-header__icon-container

    //- div.map-analysis-area-container
    //-   div#map.map
    //-   div#analysis-area.analysis-area
    //- div#popup-content.popup-content
    //- div#results-container.results-container

block append esri-script
  script.

    function toObject(querystring) {
      if (!querystring) { return {}; }
      const result = {};
      const pairs = querystring.split('&').map((item) => {
        return item.split('=').map(str => decodeURIComponent(str));
      });
      // Should have an array of arrays now, ex: [['a','b'], ['foo','bar']]
      pairs.forEach((pair) => {
        if ((pair[0] === null || typeof pair[0] === 'undefined') || (pair[0] === null || typeof pair[0] === 'undefined')) {
          console.warn(`You provided an invalid key-value pair, ${pair[0]} is being omitted.`);
          return;
        }
        result[pair[0]] = pair[1];
      });
      return result;
    }

    let windowPath = location.href;
    if (windowPath.indexOf('#') > -1) {
      windowPath = windowPath.slice(0, windowPath.indexOf('#')) + windowPath.slice(windowPath.indexOf('#') + 1, windowPath.length);
    }

    const bits = windowPath.split('?');
    const querystring = bits.length > 1 ? bits[1] : '';
    const reportParams = toObject(querystring);

    var _app = {
      cache: reportParams.cache,
      esri: %ESRI_VERSION%,
      base: ''
    };

    function makePath (base, path) {
      var position = base.length - 1;
      return !path ?
        (base.indexOf('/', position) !== position ? base + '/' : base) :
        (base.indexOf('/', position) !== position ?
          base + '/' + path :
          base + path
        )
    }
    function getResourcePath (path) {
      var position = path.length - 1;
      return path.indexOf('/', position) === position ? path.slice(0, -1) : path;
    }
    // Change this to '' if _app.base is a remote url 
    var base = location.href.replace(/\/[^/]+$/, '');
    // Add trailing slash if it is not present
    base = makePath(base);
    // Add _app.base if it is present
    if (_app.base) { base = makePath(base, _app.base); }

    var dojoConfig = {
      parseOnLoad: false,
      async: true,
      packages: [
        { name: 'root', location: getResourcePath(location.href.replace(/\/[^/]+$/, '')) },
        { name: 'js', location: makePath(base, 'js')},
        { name: 'utils', location: makePath(base, 'js/utils')},
        { name: 'helpers', location: makePath(base, 'js/helpers')},
        { name: 'report', location: makePath(base, 'js/report')},
        { name: 'constants', location: makePath(base,'js/constants')}
      ],
      aliases: [
        ['resources', 'root/resources'],
        ['babel-polyfill', 'babel-polyfill/browser-polyfill']
      ],
      deps: ['dojo/domReady!'],
      callback: function () {require(['js/report']);}
    };

  //- PROD: if new modules are added, regenerate the JSAPI build
  script(src='https://my.gfw-mapbuilder.org/js/arcgis-api-mapbuilder-1.2/dojo/dojo.js', async)
  //- script(src="https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.7/vega.min.js")
  script(src="https://cdnjs.cloudflare.com/ajax/libs/vega/4.2.0/vega.min.js", charset='UTF-8')
  //- DEV: Use the normal JSAPI
  //- script(src=`//js.arcgis.com/${%ESRI_VERSION%}/init.js`, async)
  script.
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
